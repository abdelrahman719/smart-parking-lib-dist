import { ElementRef } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { IComponentFormError } from '../../interfaces';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import * as i0 from "@angular/core";
export declare class CustomFileUploadComponent {
    private sanitizer;
    parentForm: FormGroup;
    FileTypes: string[];
    maxFileSize: string;
    controlName: string;
    label: string;
    labelClass: string;
    buttonSelectLabel: string;
    FileTypesMessage: string;
    placeholder: string;
    gridCols: number;
    validation: IComponentFormError[];
    disabled: boolean;
    maxFileCount: number;
    fileInput: ElementRef<HTMLInputElement>;
    private clearFileInput;
    checkedUploadCloud: SafeHtml;
    checkedGenAttachmentIcon: SafeHtml;
    checkedPptIcon: SafeHtml;
    checkedXlsIcon: SafeHtml;
    private _toast;
    private blobUrlCache;
    private mimeTypesMap;
    private fileTypeIcons;
    private defaultIcon;
    selectedFileName: string | null;
    constructor(sanitizer: DomSanitizer);
    fileUrl(file: File): string;
    removeSelectedFile(id: number): void;
    ngOnDestroy(): void;
    private readFileAsBase64;
    onFileSelected($event: Event): Promise<void>;
    containRequiredError(): boolean;
    getFileTypesText(): string;
    get mimeTypes(): string[];
    getFileIconSvg(mimeType: string): string;
    isImageFile(mimeType: string): boolean;
    onImageError(event: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<CustomFileUploadComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CustomFileUploadComponent, "custom-file-upload", never, { "parentForm": { "alias": "parentForm"; "required": true; }; "FileTypes": { "alias": "FileTypes"; "required": true; }; "maxFileSize": { "alias": "maxFileSize"; "required": true; }; "controlName": { "alias": "controlName"; "required": true; }; "label": { "alias": "label"; "required": true; }; "labelClass": { "alias": "labelClass"; "required": false; }; "buttonSelectLabel": { "alias": "buttonSelectLabel"; "required": false; }; "FileTypesMessage": { "alias": "FileTypesMessage"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; "gridCols": { "alias": "gridCols"; "required": false; }; "validation": { "alias": "validation"; "required": true; }; "disabled": { "alias": "disabled"; "required": false; }; "maxFileCount": { "alias": "maxFileCount"; "required": false; }; }, {}, never, never, true, never>;
}
